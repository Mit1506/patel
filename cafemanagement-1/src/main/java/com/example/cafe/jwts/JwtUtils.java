
package com.example.cafe.jwts;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.SecretKey;

import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtils {
	
	public static final String
  //  public static final String SECRET = "413F4428472B4B6250655368566D5970337336763979244226452948404D6351";

	public String genreteToken(String email) {
		Map<String, Object>claims=new HashMap<>();
		return createToken(claims,email);
	}

	private String createToken(Map<String, Object> claims, String email) {
		
		return Jwts.builder()
				.setClaims(claims)
				.setSubject(email)
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis()+1000*60*30))
				.signWith(getSignKey(),SignatureAlgorithm.HS256 ).compact();
	}

	private SecretKey getSignKey() {
		
		byte[] keybyte=Decoders.BASE64.decode(SECRET);
		return Keys.hmacShaKeyFor(keybyte);
	}
	
	
}
